rm(list=ls())
# load packages
#library(prob)
library(dplyr)
library(tidyr)
library(ggplot2)
library(geosphere)
library(tidyverse)
library(readr)
library(raster)
library(sf)
library(exactextractr)
library(lubridate)
library(collapse)
library(terra)
#--------------------------------------------------#
# 0. Set data paths and several variables manually
#--------------------------------------------------#
path = "/Users/alinagafanova/Library/CloudStorage/Box-Box/recovery-from-disasters/"
#years for start and finish of the analysis (the same as hurricane data file)
year_min = 1987
year_max = 2013
#path to shape files of the country on 2 levels
ADM2_path = paste(path, "data/firm-data/Vietnam/gadm36_VNM_shp/VNM_adm2.shp", sep="")
ADM0_path = paste(path, "data/firm-data/Vietnam/gadm36_VNM_shp/gadm36_VNM_0.shp", sep="")
#unique geographical ID in ADM2 shape file
ID_2 = "ID_2"
#path to a 0.1x0.1deg grid for a country and its 200km buffer (created in QGIS): vector
grid_vect_path = paste(path, "data/tropical-cyclones/intermediate/Vietnam/grid_0p1deg.shp", sep="")
#path to a 0.1x0.1deg grid for a country and its 200km buffer (created in QGIS): raster
grid_rast_path = paste(path, "./data/tropical-cyclones/intermediate/Vietnam/grid_0p1deg.tif", sep="")
#path to country-specific hurricane data: shape file of hurricanes' eyes in 200km buffer (created in QGIS)
#hurr_path = paste(path, "data/tropical-cyclones/intermediate/Vietnam/subset_1987_2013_200km.shp", sep="")
hurr_path = paste(path, "data/tropical-cyclones/intermediate/Vietnam/subset_1987_1996_200km.shp", sep="")
#path to individual storm files and main hurricane folder for the country
hurr_ind_storms = paste(path, "data/tropical-cyclones/intermediate/Vietnam/csvs", sep="")
hurr_country_storms = paste(path, "data/tropical-cyclones/intermediate/Vietnam", sep="")
##########################
#NO MANUAL CHANGES BELOW
##########################
#path to all hurricane data
hurr_all_path = paste(path, "data/tropical-cyclones/raw/IBTrACS-points/IBTrACS.ALL.list.v04r00.points.shp", sep="")
#path to a main folder with various gpw population data
gpw_pop_main_path = paste(path, "data/population/intermediate/global_annual_gpw", sep="")
#--------------------------------------------------#
# 1. Load and clean data
#--------------------------------------------------#
setwd(path)
#load shape files
ADM2 <- st_read(ADM2_path)
ADM2 <- subset(ADM2, select=c(ID_2))
ADM0 <- st_read(ADM0_path)
#load hurricane data and get unique hurricane IDs
hurr <- st_read(hurr_path)
crs <- st_crs(hurr)
hurr_unique <- unique(hurr$SID)
#load all hurricanes and subset by unique IDs for that country (to get full data on locations)
hurr_all <- st_read(hurr_all_path)
hurr_subset_by_id <- hurr_all[hurr_all$SID %in% hurr_unique,]
#clean hurr_subset_by_id
hurr_subset_by_id$ISO_TIME <- ISOdate(hurr_subset_by_id$year, hurr_subset_by_id$month, hurr_subset_by_id$day, hurr_subset_by_id$hour, hurr_subset_by_id$min)
hurr_subset_by_id <- subset(hurr_subset_by_id, TRACK_TYPE == "main")
hurr_subset_by_id$V_m <- hurr_subset_by_id$USA_WIND
names(hurr_subset_by_id)[names(hurr_subset_by_id) == "STORM_SPD"] <- "V_h"
hurr_subset_by_id <- st_drop_geometry(subset(hurr_subset_by_id, select=c("SID", "ISO_TIME","LON","LAT","V_m","V_h")))
#rm(hurr_all)
#load grids in a vector format (two of the same grids: I need to modify it but I need to use it later)
grid <- st_read(grid_vect_path)
grid <- st_transform(grid, crs = crs)
grid2 <- st_read(grid_vect_path)
grid2 <- st_transform(grid2, crs = crs)
#load grid in a raster format
gridRaster <- raster(grid_rast_path)
dt <- read.csv(file = paste(hurr_country_storms,"/maxWinds.csv",sep=""))
dt <- subset(dt, select = -c(X))
years<- rep(seq(year_min,year_max), dim(grid)[1])
grid$site_latitude <- grid$bottom+(grid$top-grid$bottom)/2
grid$site_longitude <- grid$left+(grid$right-grid$left)/2
grid <- st_drop_geometry(grid)
grid <- subset(grid, select = -c(left, right, top, bottom, id))
grid$rep <- year_max - year_min + 1
m <- rep(sequence(nrow(grid)), grid$rep)
grid <- grid[m,]
grid[duplicated(m),] <- NA
#fill in data for each observation
grid$year <- years
grid <- grid %>% fill(site_latitude, .direction = "down")
grid <- grid %>% fill(site_longitude, .direction = "down")
grid <- subset(grid, select = -c(rep))
#merge to get the full panel
panel <- merge(grid, dt, by = c("site_latitude", "site_longitude", "year"), all = TRUE)
panel[is.na(panel$V_s),]$V_s <- 0
panel[panel$V_s<0,]$V_s <- 0
panel[is.na(panel$storm),]$storm <- 0
panel[is.na(panel$one),]$one <- 0
panel[is.na(panel$two),]$two <- 0
panel[is.na(panel$three),]$three <- 0
panel[is.na(panel$four),]$four <- 0
panel[is.na(panel$five),]$five <- 0
write.csv(panel, file = paste(hurr_country_storms,"/maxWinds_with0.csv",sep=""))
rm(panel, grid, dt, m, years)
panel <- read.csv(paste(hurr_country_storms,"/maxWinds_with0.csv",sep=""))
panel <- subset(panel, select = -c(X))
panel<-panel[,c(2,1,3:10)]
#loop through years
for (y in year_min:year_max) {
#load grid with population data
pop_raster <-raster(paste(gpw_pop_main_path,
"/gpw-v4-population-count-", y, ".tif",sep=""))
#subset winds to one year per iteration and convert to raster
winds_raster <- rasterFromXYZ(panel[panel$year==y,], digits=1, crs = crs(pop_raster))
# crop population data to country extents
pop_raster <- terra::crop(pop_raster, winds_raster, snap="out")
#downscale wind raster to population
winds_raster <- raster::resample(winds_raster, pop_raster,method="ngb")
#convert population data to dataframe
pop_df <- as.data.frame(pop_raster, xy=TRUE, centroids=TRUE)
rm(pop_raster)
#convert wind raster to dataframe
winds_df <- as.data.frame(winds_raster, xy=TRUE, centroids=TRUE)
rm(winds_raster)
#create a column for coordinates (faster merge)
pop_df <-  pop_df %>%
mutate(coord = paste0(x, y, sep=""))
winds_df <- winds_df %>%
mutate(coord = paste0(x, y, sep=""))
#merge winds and population
winds_df <- subset(winds_df, select = -c(x,y))
merged <- merge(pop_df, winds_df, by = 'coord')
rm(pop_df, winds_df)
#rename columns
merged <- subset(merged, select = -c(coord))
names(merged)[names(merged) == paste("gpw.v4.population.count.",y, sep="")] <- "pop"
#drop NA values (I accidentally added weird coords in matlab, change it after)
merged <- merged[!is.na(merged$V_s),]
#replace by 0 if winds are less than 17m/s
merged[merged$V_s<17,]$V_s <- 0
#save files to a new folder (year by year)
write.csv(merged, file = paste(hurr_country_storms,"/annual_winds_with_population/wind_and_pop_",y,".csv",sep=""))
rm(merged)
}
y
View(panel)
unique(panel$year)
for (y in year_min:year_max) {
y
#load grid with population data
pop_raster <-raster(paste(gpw_pop_main_path,
"/gpw-v4-population-count-", y, ".tif",sep=""))
#subset winds to one year per iteration and convert to raster
winds_raster <- rasterFromXYZ(panel[panel$year==y,], digits=1, crs = crs(pop_raster))
# crop population data to country extents
pop_raster <- terra::crop(pop_raster, winds_raster, snap="out")
#downscale wind raster to population
winds_raster <- raster::resample(winds_raster, pop_raster,method="ngb")
#convert population data to dataframe
pop_df <- as.data.frame(pop_raster, xy=TRUE, centroids=TRUE)
rm(pop_raster)
#convert wind raster to dataframe
winds_df <- as.data.frame(winds_raster, xy=TRUE, centroids=TRUE)
rm(winds_raster)
#create a column for coordinates (faster merge)
pop_df <-  pop_df %>%
mutate(coord = paste0(x, y, sep=""))
winds_df <- winds_df %>%
mutate(coord = paste0(x, y, sep=""))
#merge winds and population
winds_df <- subset(winds_df, select = -c(x,y))
merged <- merge(pop_df, winds_df, by = 'coord')
rm(pop_df, winds_df)
#rename columns
merged <- subset(merged, select = -c(coord))
names(merged)[names(merged) == paste("gpw.v4.population.count.",y, sep="")] <- "pop"
#drop NA values (I accidentally added weird coords in matlab, change it after)
merged <- merged[!is.na(merged$V_s),]
#replace by 0 if winds are less than 17m/s
merged[merged$V_s<17,]$V_s <- 0
#save files to a new folder (year by year)
write.csv(merged, file = paste(hurr_country_storms,"/annual_winds_with_population/wind_and_pop_",y,".csv",sep=""))
rm(merged)
}
for (y in year_min:year_max) {
print(y)}
for (y in year_min:year_max) {
print(y)
#load grid with population data
pop_raster <-raster(paste(gpw_pop_main_path,
"/gpw-v4-population-count-", y, ".tif",sep=""))
#subset winds to one year per iteration and convert to raster
winds_raster <- rasterFromXYZ(panel[panel$year==y,], digits=1, crs = crs(pop_raster))
# crop population data to country extents
pop_raster <- terra::crop(pop_raster, winds_raster, snap="out")
#downscale wind raster to population
winds_raster <- raster::resample(winds_raster, pop_raster,method="ngb")
#convert population data to dataframe
pop_df <- as.data.frame(pop_raster, xy=TRUE, centroids=TRUE)
rm(pop_raster)
#convert wind raster to dataframe
winds_df <- as.data.frame(winds_raster, xy=TRUE, centroids=TRUE)
rm(winds_raster)
#create a column for coordinates (faster merge)
pop_df <-  pop_df %>%
mutate(coord = paste0(x, y, sep=""))
winds_df <- winds_df %>%
mutate(coord = paste0(x, y, sep=""))
#merge winds and population
winds_df <- subset(winds_df, select = -c(x,y))
merged <- merge(pop_df, winds_df, by = 'coord')
rm(pop_df, winds_df)
#rename columns
merged <- subset(merged, select = -c(coord))
names(merged)[names(merged) == paste("gpw.v4.population.count.",y, sep="")] <- "pop"
#drop NA values (I accidentally added weird coords in matlab, change it after)
merged <- merged[!is.na(merged$V_s),]
#replace by 0 if winds are less than 17m/s
merged[merged$V_s<17,]$V_s <- 0
#save files to a new folder (year by year)
write.csv(merged, file = paste(hurr_country_storms,"/annual_winds_with_population/wind_and_pop_",y,".csv",sep=""))
rm(merged)
}
panel <- read.csv(paste(hurr_country_storms,"/maxWinds_with0.csv",sep=""))
panel <- subset(panel, select = -c(X))
panel <- panel[,c(2,1,3:10)]
pop_raster <-raster(paste(gpw_pop_main_path,
"/gpw-v4-population-count-2000.tif",sep=""))
winds_raster <- rasterFromXYZ(panel[panel$year==2000,], digits=1, crs = crs(pop_raster))
pop_raster <- terra::crop(pop_raster, winds_raster, snap="out")
rm(panel, winds_raster)
#rasterize shapefile with ADM2 to the grid
grid_regions <- exact_extract(pop_raster, ADM2, include_xy=TRUE, force_df=TRUE, include_cols= ID_2)
grid_regions <- bind_rows(grid_regions)
grid_regions <- subset(grid_regions, select = -value)
names(grid_regions)[names(grid_regions) == "x"] <- "site_longitude"
names(grid_regions)[names(grid_regions) == "y"] <- "site_latitude"
#round up coordinates to avoid weird results
grid_regions$site_longitude <- round(grid_regions$site_longitude,4)
grid_regions$site_latitude <- round(grid_regions$site_latitude,4)
#dataset to append
dataset = data.frame()
# loop through annual files
for (y in year_min:year_max) {
panel <- read.csv(paste(hurr_country_storms,"/annual_winds_with_population/wind_and_pop_",y,".csv",sep=""))
panel <- subset(panel, select = -c(X))
#round up coordinates to avoid weird results
names(panel)[names(panel) == "x"] <- "site_longitude"
names(panel)[names(panel) == "y"] <- "site_latitude"
panel$site_longitude <- round(panel$site_longitude,4)
panel$site_latitude <- round(panel$site_latitude,4)
#merge regions with maximum winds observations
windsLand <- merge(grid_regions, panel, by = c("site_latitude", "site_longitude"))
windsLand <- subset(windsLand, select = -c(site_latitude, site_longitude))
windsLand$ID_2 <- as.numeric(windsLand$ID_2)
windsLand <- windsLand[with(windsLand, order(year, ID_2)), ]
rm(panel)
names(windsLand)[names(windsLand) == paste("gpw.v4.population.count.",y, sep="")] <- "pop"
#add weights by ignoring population (if less than 1 person per cell)
windsLand$coverage_fraction_pop <- windsLand$coverage_fraction
windsLand[windsLand$pop<1,]$coverage_fraction_pop <- 0
#take a weighted average (I assume all grids have the same area here)
windsLand <- windsLand %>%
group_by(year, ID_2) %>%
mutate(weighted_V_s = weighted.mean(V_s, coverage_fraction,na.rm=TRUE),
weighted_storm = weighted.mean(storm, coverage_fraction,na.rm=TRUE),
weighted_one = weighted.mean(one, coverage_fraction,na.rm=TRUE),
weighted_two = weighted.mean(two, coverage_fraction,na.rm=TRUE),
weighted_three = weighted.mean(three, coverage_fraction,na.rm=TRUE),
weighted_four = weighted.mean(four, coverage_fraction,na.rm=TRUE),
weighted_five = weighted.mean(five, coverage_fraction,na.rm=TRUE),
weighted_pop_V_s = weighted.mean(V_s, coverage_fraction_pop,na.rm=TRUE),
weighted_pop_storm = weighted.mean(storm, coverage_fraction_pop,na.rm=TRUE),
weighted_pop_one = weighted.mean(one, coverage_fraction_pop,na.rm=TRUE),
weighted_pop_two = weighted.mean(two, coverage_fraction_pop,na.rm=TRUE),
weighted_pop_three = weighted.mean(three, coverage_fraction_pop,na.rm=TRUE),
weighted_pop_four = weighted.mean(four, coverage_fraction_pop,na.rm=TRUE),
weighted_pop_five = weighted.mean(five, coverage_fraction_pop,na.rm=TRUE))
#replace missing values in pop-weighted vars with 0 (in case all ADM2 cells are not populated)
windsLand[is.na(windsLand$weighted_pop_V_s),]$weighted_pop_V_s <- 0
windsLand[is.na(windsLand$weighted_pop_storm),]$weighted_pop_storm <- 0
windsLand[is.na(windsLand$weighted_pop_one),]$weighted_pop_one <- 0
windsLand[is.na(windsLand$weighted_pop_two),]$weighted_pop_two <- 0
windsLand[is.na(windsLand$weighted_pop_three),]$weighted_pop_three <- 0
windsLand[is.na(windsLand$weighted_pop_four),]$weighted_pop_four <- 0
windsLand[is.na(windsLand$weighted_pop_five),]$weighted_pop_five <- 0
windsLand <- subset(windsLand, select = -c(coverage_fraction,coverage_fraction_pop, V_s, storm, one, two, three, four, five,pop))
windsLand <- distinct(windsLand)
dataset <- rbind(dataset, windsLand)
rm(windsLand)
}
#combine all csv files
write.csv(dataset, file = paste(hurr_country_storms,"/maxWindsADM2_with_population.csv",sep=""))
