##---------------------------------------------------
## This is R code for rasterizing shapefile with     
## Colombian administrative data                      
## Author: Alina Gafanova                 
##---------------------------------------------------

# load packages
library('raster')
library('rgdal')
library('rgeos')
library('sf')
library('fasterize')
library('maptools')

#--------------------------------#
# 1. Load and clean data
#--------------------------------#

# read shape file of Colombia ADM2 polygons and shape file of all country
country_shp <- st_read("../../../data/firm-data/Colombia/Shapefile/COL_adm_shp/COL_adm2.shp")
# read raster grid with 30'' resolution 
grid <- raster("../../../data/GPW/gpw-v4-land-water-area-rev11_landareakm_30_sec_tif/gpw_v4_land_water_area_rev11_landareakm_30_sec.tif")
# crop grid to bbox of the country
country_grid <- crop(grid, country_shp, snap = 'out')

#------------------------------------------------------------#
# 2. V1: Rasterize; if several districts cover the cell,
# choose district that overlaps cell's center
#------------------------------------------------------------#
raster_district_id <- fasterize(country_shp, country_grid, field = "ID_2", background = -99)
raster_district_id_and_areas <- 









country_grid_polygons <- rasterToPolygons(country_grid) # TOO SLOW

store_coord <- data.frame(matrix(NA, nrow = length(country_grid), ncol = 2))
colnames(store_coord) <- c("x", "y")

for (i in 1:length(country_grid)){
  store_coord[i,] <- xyFromCell(country_grid, cell = i)
}
  
for (i in 1:3000){  
  store_coord[i,] <- xyFromCell(country_grid, cell = i)
}



one_polygon <- shp_col[1,]
one_polygon_result <- fasterize(one_polygon, grid, field = "ID_2", background = -99)

writeRaster(grid, 'one_polygon_result.tiff')

fasterize
field - id of a district?

lst <- lapply(1:length(grid), function(i) {
    
    # create polygons subset based on current grid cell
    spy_poly_crp <- crop(shp_col, grid[i, ])
    
    # case 1: no polygon intersects with current cell
    if (is.null(spy_poly_crp)) {
      out <- data.frame(matrix(ncol = ncol(spy_poly), nrow = 1))
      names(out) <- names(spy_poly)
      return(out)
      # case 2: one polygon intersects with current cell  
    } else if (nrow(spy_poly_crp@data) == 1)  {
      return(spy_poly_crp@data) 
      # case 3: multiple polygons intersect with current cell
      # -> choose sub-polygon with largest area
    } else {
      areas <- gArea(spy_poly_crp, byid = TRUE)
      index <- which.max(areas)
      return(spy_poly_crp@data[index, ])
    }
})
